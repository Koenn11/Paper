From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 May 2020 22:12:46 -0400
Subject: [PATCH] Ensure Entity AABB's are never invalid


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 48373bf947fc19a34caa34daeed980cc433bc600..896832d4742969e6cc2f58bbba281b4a60ef28b0 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -389,7 +389,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     public void setPosition(double d0, double d1, double d2) {
         this.setPositionRaw(d0, d1, d2);
-        this.a(this.size.a(d0, d1, d2));
+        //this.a(this.size.a(d0, d1, d2)); // Paper - move into setPositionRaw
         if (valid) ((WorldServer) world).chunkCheck(this); // CraftBukkit
     }
 
@@ -2904,6 +2904,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return new AxisAlignedBB(vec3d, vec3d1);
     }
 
+    public final void setBoundingBox(AxisAlignedBB axisalignedbb) { a(axisalignedbb); } // Paper - OBFHELPER
     public void a(AxisAlignedBB axisalignedbb) {
         // CraftBukkit start - block invalid bounding boxes
         double minX = axisalignedbb.minX,
@@ -3342,6 +3343,12 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public void setPositionRaw(double d0, double d1, double d2) {
+        // Paper start - never allow AABB to become desynced from position
+        // hanging has its own special logic
+        if (!(this instanceof EntityHanging) && (this.loc.x != d0 || this.loc.y != d1 || this.loc.z != d2)) {
+            this.setBoundingBox(this.size.a(d0, d1, d2));
+        }
+        // Paper end
         if (this.loc.x != d0 || this.loc.y != d1 || this.loc.z != d2) {
             this.loc = new Vec3D(d0, d1, d2);
             int i = MathHelper.floor(d0);
